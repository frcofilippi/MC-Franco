{"version":3,"sources":["components/Checkout/CheckoutSummary.module.css","containers/ContactData/ContactData.module.css","components/Checkout/CheckoutSummary.js","containers/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","Burger","burgerIngredients","Controls","Button","type","clicked","cancelClicked","continueClicked","ContactData","state","orderForm","name","inputType","value","label","elementConfig","placeholder","validationRules","required","maxLength","touched","valid","email","minLength","street","zipcode","country","deliveryMethod","options","displayValue","orderFormValid","orderClickHandler","event","preventDefault","form","customerData","Object","keys","map","field","order","ingredients","price","totalPrice","date","Date","contact","userId","user","uid","onOrderPlaced","idToken","history","inputChangeHandler","inputElement","updatedOrderForm","target","validateInput","formValid","checkFormValidity","setState","key","this","inputElment","rules","length","inputs","push","id","formFields","InputElement","changed","contactForm","onSubmit","disabled","Fragment","loading","Spinner","Component","connect","burger","orders","auth","dispatch","orderInfo","beginPlacingOrder","withErrorHandler","axios","Checkout","continueClickedHandler","replace","cancelClickedHandler","goBack","summary","path","match","component","to"],"mappings":"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","file":"static/js/3.5584ad0f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3xsyB\",\"Controls\":\"CheckoutSummary_Controls__pjYi2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2IpH5\"};","import React from 'react';\r\nimport Burger from '../Burger/Burger';\r\nimport Button from '../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h3>Hope this tastes well!</h3>\r\n            <Burger burgerIngredients={props.burgerIngredients} />\r\n            <div className={classes.Controls}>\r\n                <Button type='danger' clicked={props.cancelClicked}>CANCEL</Button>\r\n                <Button type='success' clicked={props.continueClicked}>CONTINUE</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport InputElement from '../../components/UI/InputElement/InputElement';\r\nimport { connect } from 'react-redux';\r\nimport { beginPlacingOrder } from '../../store/actions/index';\r\nimport classes from './ContactData.module.css';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from '../../axiosOrders';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                inputType: 'input',\r\n                value: '',\r\n                label: 'Name',\r\n                elementConfig: {\r\n                    placeholder: 'Enter your name',\r\n                    type: 'text',\r\n                    validationRules: {\r\n                        required: true,\r\n                        maxLength: 3\r\n                    }\r\n                },\r\n                touched: false,\r\n                valid: true\r\n            },\r\n            email: {\r\n                inputType: 'input',\r\n                value: '',\r\n                label: 'Email',\r\n                elementConfig: {\r\n                    placeholder: 'Enter your email',\r\n                    type: 'email',\r\n                    validationRules: {\r\n                        required: true,\r\n                        minLength: 6\r\n                    }\r\n                },\r\n                touched: false,\r\n                valid: true\r\n            },\r\n            street: {\r\n                inputType: 'input',\r\n                value: '',\r\n                label: 'Street',\r\n                elementConfig: {\r\n                    placeholder: 'Enter your address',\r\n                    type: 'text',\r\n                    validationRules: {\r\n                        required: true,\r\n                        minLength: 10\r\n                    }\r\n                },\r\n                touched: false,\r\n                valid: true\r\n            },\r\n            zipcode: {\r\n                inputType: 'input',\r\n                value: '',\r\n                label: 'Zipcode',\r\n                elementConfig: {\r\n                    placeholder: 'Enter your zipcode',\r\n                    type: 'text',\r\n                    validationRules: {\r\n                        required: true,\r\n                        minLength: 5\r\n                    }\r\n                },\r\n                touched: false,\r\n                valid: true\r\n            }, country: {\r\n                inputType: 'input',\r\n                value: '',\r\n                label: 'Country',\r\n                elementConfig: {\r\n                    placeholder: 'Enter your Country',\r\n                    type: 'text',\r\n                    validationRules: {\r\n                        required: true\r\n                    }\r\n                },\r\n                touched: false,\r\n                valid: true\r\n            },\r\n            deliveryMethod: {\r\n                inputType: 'dropdown',\r\n                value: '',\r\n                label: 'Delivery Method',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'regular', displayValue: 'Regular Delivery (from 1 to 2 hours)' },\r\n                        { value: 'express', displayValue: 'Regular Delivery (within 30 minutes)' },\r\n                    ],\r\n                    validationRules: null\r\n                },\r\n                touched: true,\r\n                valid: true\r\n            }\r\n        },\r\n        orderFormValid: false\r\n    }\r\n\r\n    orderClickHandler = (event) => {\r\n        event.preventDefault();\r\n        const form = { ...this.state.orderForm };\r\n        let customerData = {};\r\n        Object.keys(form)\r\n            .map(field => {\r\n                return customerData[field] = form[field].value\r\n            });\r\n\r\n        const order = {\r\n            ingredients: this.props.burgerIngredients,\r\n            price: this.props.totalPrice,\r\n            date: new Date(),\r\n            contact: customerData,\r\n            userId: this.props.user.uid\r\n        };\r\n        this.props.onOrderPlaced(this.props.user.idToken,order, this.props.history);\r\n    }\r\n\r\n    inputChangeHandler = (event, inputElement) => {\r\n        const updatedOrderForm = { ...this.state.orderForm };\r\n        const value = event.target.value;\r\n        updatedOrderForm[inputElement].value = value;\r\n        updatedOrderForm[inputElement].touched = true;\r\n        updatedOrderForm[inputElement].valid = this.validateInput(inputElement, value);\r\n        const formValid = this.checkFormValidity();\r\n        this.setState({ orderForm: updatedOrderForm, orderFormValid: formValid });\r\n    }\r\n\r\n    checkFormValidity() {\r\n        let valid = true;\r\n        for (let key in this.state.orderForm) {\r\n            if (this.state.orderForm[key].valid === false || this.state.orderForm[key].touched === false) {\r\n                valid = false;\r\n            }\r\n        }\r\n        return valid;\r\n    }\r\n\r\n    validateInput(inputElment, value) {\r\n        const rules = this.state.orderForm[inputElment].elementConfig.validationRules;\r\n        let valid = true;\r\n        if (rules && rules.required) {\r\n            if (value === '' && this.state.orderForm[inputElment].touched === true) {\r\n                valid = false;\r\n            }\r\n        }\r\n\r\n        if (rules && rules.minLength) {\r\n            if (value.length < rules.minLength) {\r\n                valid = false;\r\n            }\r\n        }\r\n\r\n        if (rules && rules.maxLength) {\r\n            if (value.length > rules.maxLength) {\r\n                valid = false;\r\n            }\r\n        }\r\n\r\n        return valid;\r\n    }\r\n\r\n    render() {\r\n\r\n        let inputs = [];\r\n\r\n        for (let key in this.state.orderForm) {\r\n            inputs.push({\r\n                id: key,\r\n                ...this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n        const formFields = inputs.map(field => {\r\n            return (<InputElement\r\n                key={field.id}\r\n                {...field}\r\n                changed={this.inputChangeHandler}\r\n            />);\r\n        })\r\n\r\n        const contactForm = (\r\n            <div className={classes.ContactData}>\r\n                <h3>Enter your contact information:</h3>\r\n                <form onSubmit={this.orderClickHandler}>\r\n                    {formFields}\r\n                    <button type='submit' disabled={!this.state.orderFormValid}>Place Order</button>\r\n                </form>\r\n            </div>);\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.loading ? <Spinner /> : contactForm}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        totalPrice: state.burger.totalPrice,\r\n        burgerIngredients: state.burger.burgerIngredients,\r\n        loading: state.orders.loading,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderPlaced: (idToken, orderInfo, history) => dispatch(beginPlacingOrder(idToken, orderInfo, history))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Checkout/CheckoutSummary';\r\nimport ContactData from '../ContactData/ContactData';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = this.loadDatafromQuery();\r\n    // }\r\n\r\n\r\n    // loadDatafromQuery() {\r\n    //     const ingredients = {};\r\n    //     const queryParams = new URLSearchParams(this.props.location.search);\r\n    //     let price = 0;\r\n    //     for (let param of queryParams.entries()) {\r\n    //         if (param[0] === 'price') {\r\n    //             price = param[1];\r\n    //         } else {\r\n    //             ingredients[param[0]] = +param[1];\r\n\r\n    //         }\r\n    //     }\r\n    //     return { burgerIngredients: ingredients, totalPrice: price };\r\n    // }\r\n\r\n    continueClickedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    cancelClickedHandler = () => {\r\n        this.props.history.goBack()\r\n    }\r\n\r\n    render() {\r\n        const summary = (\r\n            <React.Fragment>\r\n                <CheckoutSummary\r\n                    burgerIngredients={this.props.ingredients}\r\n                    continueClicked={this.continueClickedHandler}\r\n                    cancelClicked={this.cancelClickedHandler}\r\n                />\r\n                {/* {this.state.showContactForm ? <ContactData /> : null} */}\r\n                {/* <Route\r\n                    path={this.props.match.path + '/contact-data'}\r\n                    render={(props) => (<ContactData {...props} burgerIngredients={this.props.ingredients} totalPrice={this.state.totalPrice} />)}\r\n                /> */}\r\n                <Route\r\n                    path={this.props.match.path + '/contact-data'}\r\n                    component={ContactData}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n\r\n        return (\r\n            <React.Fragment>\r\n                { this.props.ingredients ? summary : <Redirect to='/' />}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burger.burgerIngredients\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}